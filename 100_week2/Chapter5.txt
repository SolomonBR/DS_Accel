Section 5.2
===========

5.2.4 Exercises
Find all flights that:

Had an arrival delay of two or more hours
> hours <- 60
> filter(flights, arr_delay > (2 * hours))

Flew to Houston (IAH or HOU)
> filter(flights, dest %in% c("IAH", "HOU"))

Were operated by United, American, or Delta
> filter(flights, carrier %in% c("UA", "AA", "DL"))

Departed in summer (July, August, and September)
> filter(flights, month >= 7 & month <= 9)

Arrived more than two hours late, but didnâ€™t leave late
> hours <- 60
> filter(flights, ((arr_delay > 2 * hours) & (dep_delay <= 0)))

Were delayed by at least an hour, but made up over 30 minutes in flight
> minutes <- 1
> filter(flights, ((dep_delay >= 1 * hours) & ((dep_delay - arr_delay) > 30 * minutes)))

Departed between midnight and 6am (inclusive)
> filter(flights, dep_time >= 0000 & dep_time <= 0600)

Another useful dplyr filtering helper is between(). What does it do? Can you use it to simplify the code needed to answer the previous challenges?
> filter(flights, between(month, 7, 9))
> filter(flights, between(dep_time, 0000, 0600))

How many flights have a missing dep_time?
# 8255

What other variables are missing?
# dep_delay, arr_time, arr_delay, tailnum

What might these rows represent?
# Canceled flights?

Why is NA ^ 0 not missing?
# So, the reason that any number to the zero power is one is because any number to the zero power is just the product of no numbers at all, which is the multiplicative identity, 1. REF: http://scienceline.ucsb.edu/getkey.php?key=2626

Why is NA | TRUE not missing?
# Because "or" continues evaluation until it finds a true expression

Why is FALSE & NA not missing?
# Because NA is falsey?

Can you figure out the general rule? (NA * 0 is a tricky counterexample!)
# Arithmetic of NA is NA, evaluation of NA is ignored?


Section 5.3
===========

5.3.1 Exercises
How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).
> arrange(flights, desc(is.na(arr_time)))

Sort flights to find the most delayed flights.
> arrange(flights, desc(dep_delay))

Find the flights that left earliest.
> arrange(flights, dep_delay)

Sort flights to find the fastest flights.
# fast implies speed which is per unit time so..
> arrange(flights, desc(distance / air_time))

Which flights travelled the longest?
> View(arrange(flights, -air_time))

Which travelled the shortest?
> View(arrange(flights, air_time)[1,])



Section 5.4
===========

5.4.1 Exercises
Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.
> select(flights, dep_time, dep_delay, arr_time, arr_delay)
> select(flights, dep_time,dep_delay:arr_time, arr_delay)
> select(flights, dep_time:arr_delay, -starts_with("sched"))
> select(flights, starts_with("dep"), starts_with("arr"))
> select(flights, one_of("dep_time", "dep_delay", "arr_time", "arr_delay"))

What happens if you include the name of a variable multiple times in a select() call?
# It only returns that variable back once, distinctly.

What does the one_of() function do?
# Selects variables in a list of variables.

Why might it be helpful in conjunction with this vector?
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
# Because it cleanly selects among its components as variables being passed to a select:
> select(flights, one_of(vars))

Does the result of running the following code surprise you?
# Yes!

How do the select helpers deal with case by default?
# Case is ignored.

How can you change that default?
> select(flights, contains("TIME", ignore.case = FALSE))
# A tibble: 336,776 x 0
