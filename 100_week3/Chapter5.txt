SECTION 5.5.2
=============

1. Currently dep_time and sched_dep_time are convenient to look at, but hard to compute with because theyâ€™re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight.


> transmute(flights,
+           dep_time,
+           dep_hour = dep_time %/% 100,
+           dep_minute = dep_time %% 100,
+           dep_min_from_midnight = (dep_hour * 60) + dep_minute,
+           sched_dep_time,
+           sched_dep_hour = sched_dep_time %/% 100,
+           sched_dep_minute = sched_dep_time %% 100,
+           sched_dep_min_from_midnight = (sched_dep_hour * 60) + sched_dep_minute,
+ )

2.    Compare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it?

Differences because times cannot be directly subtracted.
Differences.
Convert times to minutes, then subtract them.

3. Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?
dep_time and sched_dep_time are times.. Delay is in minutes. If they were all in the same units, subtracting dep_time with sched_dep_time would result in dep_delay


4. Find the 10 most delayed flights using a ranking function. How do you want to handle ties? Carefully read the documentation for min_rank().
> View(head(arrange(flights, ranked = min_rank(desc(dep_delay))), 10))


5. What does 1:3 + 1:10 return? Why?
> 1:3 + 1:10
 [1]  2  4  6  5  7  9  8 10 12 11
Warning message:
In 1:3 + 1:10 :
  longer object length is not a multiple of shorter object length

  Because it is adding dissimilar vectors

6. What trigonometric functions does R provide?

cos(x)
sin(x)
tan(x)

acos(x)
asin(x)
atan(x)
atan2(y, x)

cospi(x)
sinpi(x)
tanpi(x)



SECTION 5.6.7
=============


2. Come up with another approach that will give you the same output as not_cancelled %>% count(dest) and not_cancelled %>% count(tailnum, wt = distance) (without using count()).

not_cancelled %>% group_by(dest) %>% summarize(n())
not_cancelled %>% group_by(tailnum) %>% summarize(sum(distance))


3. Our definition of cancelled flights (is.na(dep_delay) | is.na(arr_delay) ) is slightly suboptimal. Why? Which is the most important column?
? Because arr_delay is more important? Honestly I have no clue why this might be slightly suboptimal..


4. Look at the number of cancelled flights per day. Is there a pattern?

cancelled <- flights %>% filter(is.na(dep_time) | is.na(arr_delay))
not_cancelled <- flights %>% filter(!is.na(dep_time) & !is.na(arr_delay))

cancelledDay <- cancelled %>%
 group_by(day) %>%
 summarise(counter = n())

ggplot(data = cancelledDay, mapping = aes(x = day, y = counter)) + geom_smooth(se = FALSE)

So count of the day of the month with cancelled shows a pattern where the 1st and 15th had few delays and the 2nd and 4th week had larger numbers of delays so traveling on the first week of the month would seem to be less prone to delays.

4b . Is the proportion of cancelled flights related to the average delay?

> results <- flights %>% group_by(day) %>% summarise(
     cancelled = sum(is.na(dep_time) | is.na(arr_delay)),
     not_cancelled = sum(!is.na(dep_time) & !is.na(arr_delay)),
     proportion = cancelled / (not_cancelled + cancelled),
     avg_delay = mean(arr_delay, na.rm = TRUE)
 )
> ggplot(data = results, mapping = aes(x = day, y = proportion)) + geom_point(aes(size = avg_delay))

Yes, on a day-of-the-month grouping, clearly the larger the proportion of cancelled flights, the larger the average delays for that day.


5. Which carrier has the worst delays?

> worst <- flights %>% group_by(carrier) %>% filter(arr_delay > 0) %>% summarise(delay_sum = sum(arr_delay, na.rm = TRUE)) %>% arrange(desc(delay_sum))
> worst[1,]
# A tibble: 1 x 2
  carrier delay_sum
  <chr>       <dbl>
1 EV        1181808



6. What does the sort argument to count() do. When might you use it?

sort - if TRUE will sort output in descending order of n
It could be useful to get raw counts of things, ordered by whatever it is, for instance, count of times a flight arrived ontime :
flights %>% count(carrier, arr_delay > 0, sort = TRUE)
Strangely, it results in both the time the carrier was ahead of schedule (arr_delay > 0 == FALSE) and behind schedule (arr_delay > 0 == TRUE)



SECTION 5.7.1
=============

1. Refer back to the lists of useful mutate and filtering functions. Describe how each operation changes when you combine it with grouping.

From what I'm gathering, grouping functions are not using summarize() and do not support things like sum() and mean() which collect multiple rows into a single value, instead grouping functions keep all rows

2. Which plane (tailnum) has the worst on-time record?

> worst_flights <- flights %>% group_by(tailnum) %>% mutate(delayed_count = sum(arr_delay < 0, na.rm = TRUE)) %>% select(tailnum, delayed_count) %>% arrange(desc(delayed_count))

> worst_flights[1,]
# A tibble: 1 x 2
# Groups:   tailnum [1]
  tailnum delayed_count
  <chr>           <int>
1 N725MQ            319

3. What time of day should you fly if you want to avoid delays as much as possible?

Looks like hour 5 and 23 :
> delay_by_hour <- flights %>% filter(!is.na(arr_delay)) %>% mutate(prop_delay = arr_delay / sum(arr_delay)) %>% select(hour, prop_delay)
> ggplot(data = delay_by_hour, mapping = aes(x = hour, y = prop_delay)) + geom_point(aes(size = prop_delay)

4. For each destination, compute the total minutes of delay. For each flight, compute the proportion of the total delay for its destination.

> dest_sums <- flights %>% filter(!is.na(arr_delay) & arr_delay > 0) %>% group_by(dest) %>% summarize(delay_sum = sum(arr_delay))
> prop_delays <- flights %>% inner_join(dest_sums, by = "dest") %>% mutate(prop_delay = arr_delay / delay_sum)

5. Delays are typically temporally correlated: even once the problem that caused the initial delay has been resolved, later flights are delayed to allow earlier flights to leave.
Using lag(), explore how the delay of a flight is related to the delay of the immediately preceding flight.

> lag <- flights %>% filter(arr_delay > 0) %>% arrange(year, month, day, sched_dep_time, origin) %>% mutate(prior_arr_delay = lag(arr_delay, na.rm = TRUE))
Having a hard time line-ing up meaningful origin + gate so that the prior row correlates in some way with the next row in terms of delay ?

6. Look at each destination. Can you find flights that are suspiciously fast? (i.e. flights that represent a potential data entry error).

> flights %>% filter(!is.na(air_time)) %>% group_by(flight) %>% filter(air_time < quantile(air_time, 0.02))

6b. Compute the air time a flight relative to the shortest flight to that destination. Which flights were most delayed in the air?

> flights %>% filter(!is.na(air_time)) %>% group_by(flight) %>% mutate(min_air_time = min(air_time), rel_to = air_time / min_air_time) %>% arrange(desc(rel_to))

7. Find all destinations that are flown by at least two carriers. Use that information to rank the carriers.

> multi <- flights %>% group_by(dest) %>% mutate(count_carriers = n_distinct(carrier)) %>% filter(count_carriers >= 2) %>% arrange(dest, desc(count_carriers))

8. For each plane, count the number of flights before the first delay of greater than 1 hour.

